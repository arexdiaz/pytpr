from base64 import b64encode
import subprocess
import logging
import socket
import shutil
import os


logging.basicConfig(level=logging.INFO)

NO_OUTPUT_SIGNAL = "__INTERNAL__NO_OUTPUT_SIGNAL_123$%^&"

def local_shell(line):
    if line.startswith('!'):
        command = line[1:]  # Remove the '!' at the beginning
        if command.startswith("cd"):
            folder = command.split(" ")[1]
            try:
                os.chdir(folder)
            except FileNotFoundError:
                 print(f"cd: {folder} not found")
            finally:
                return
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        if stdout:
            print(stdout.decode().strip())
        if stderr:
            print(stderr.decode().strip())
    else:
        print('Unknown command: {}'.format(line))

def send_file(file_name, ip, port):
    with open(file_name, "rb") as f:
        binary_data = f.read()

    base64_data = b64encode(binary_data)
    s = socket.socket()
    s.connect((ip, port))
    s.sendall(base64_data)
    s.close()

def chk_payload(project_dir):
    # Get the project directory (assuming this script is in the project directory)
    payload_dir = os.path.join(project_dir, "payloads")

    # Make sure the payloads directory exists
    if not os.path.exists(payload_dir):
        os.makedirs(payload_dir)

    source_file = os.path.join(project_dir, "modules/payload.py")
    payload_file = os.path.join(payload_dir, "payload")

    if os.path.isfile(source_file):
        logging.info(f"Compiling '{source_file}' using PyInstaller")

        try:
            with open(os.devnull, "w") as devnull:
                subprocess.check_call(["pyinstaller", "-y", "--clean", "--onefile", source_file], stdout=devnull, stderr=devnull)
            
            # Move the compiled binary to the payloads directory
            shutil.move("./dist/" + os.path.basename(source_file).split(".")[0], payload_file)

            # Remove the build files generated by PyInstaller
            shutil.rmtree("./build")
            shutil.rmtree("./dist")
            os.remove(os.path.basename(source_file).split(".")[0] + ".spec")

        except subprocess.CalledProcessError as e:
            print(f"Error occurred while compiling '{source_file}': {str(e)}")
        except Exception as e:
            print(f"Unexpected error: {str(e)}")
    else:
        print("Error: Source file for PyInstaller not found.")

    return payload_file
